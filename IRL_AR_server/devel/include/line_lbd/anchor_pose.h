// Generated by gencpp from file line_lbd/anchor_pose.msg
// DO NOT EDIT!


#ifndef LINE_LBD_MESSAGE_ANCHOR_POSE_H
#define LINE_LBD_MESSAGE_ANCHOR_POSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace line_lbd
{
template <class ContainerAllocator>
struct anchor_pose_
{
  typedef anchor_pose_<ContainerAllocator> Type;

  anchor_pose_()
    : top(0.0)
    , bottom(0.0)
    , left(0.0)
    , right(0.0)  {
    }
  anchor_pose_(const ContainerAllocator& _alloc)
    : top(0.0)
    , bottom(0.0)
    , left(0.0)
    , right(0.0)  {
  (void)_alloc;
    }



   typedef float _top_type;
  _top_type top;

   typedef float _bottom_type;
  _bottom_type bottom;

   typedef float _left_type;
  _left_type left;

   typedef float _right_type;
  _right_type right;





  typedef boost::shared_ptr< ::line_lbd::anchor_pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::line_lbd::anchor_pose_<ContainerAllocator> const> ConstPtr;

}; // struct anchor_pose_

typedef ::line_lbd::anchor_pose_<std::allocator<void> > anchor_pose;

typedef boost::shared_ptr< ::line_lbd::anchor_pose > anchor_posePtr;
typedef boost::shared_ptr< ::line_lbd::anchor_pose const> anchor_poseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::line_lbd::anchor_pose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::line_lbd::anchor_pose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::line_lbd::anchor_pose_<ContainerAllocator1> & lhs, const ::line_lbd::anchor_pose_<ContainerAllocator2> & rhs)
{
  return lhs.top == rhs.top &&
    lhs.bottom == rhs.bottom &&
    lhs.left == rhs.left &&
    lhs.right == rhs.right;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::line_lbd::anchor_pose_<ContainerAllocator1> & lhs, const ::line_lbd::anchor_pose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace line_lbd

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::line_lbd::anchor_pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::line_lbd::anchor_pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::line_lbd::anchor_pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::line_lbd::anchor_pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::line_lbd::anchor_pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::line_lbd::anchor_pose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::line_lbd::anchor_pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "05c67e0263677513598d2ad449247941";
  }

  static const char* value(const ::line_lbd::anchor_pose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x05c67e0263677513ULL;
  static const uint64_t static_value2 = 0x598d2ad449247941ULL;
};

template<class ContainerAllocator>
struct DataType< ::line_lbd::anchor_pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "line_lbd/anchor_pose";
  }

  static const char* value(const ::line_lbd::anchor_pose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::line_lbd::anchor_pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 top\n"
"float32 bottom\n"
"float32 left\n"
"float32 right\n"
;
  }

  static const char* value(const ::line_lbd::anchor_pose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::line_lbd::anchor_pose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.top);
      stream.next(m.bottom);
      stream.next(m.left);
      stream.next(m.right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct anchor_pose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::line_lbd::anchor_pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::line_lbd::anchor_pose_<ContainerAllocator>& v)
  {
    s << indent << "top: ";
    Printer<float>::stream(s, indent + "  ", v.top);
    s << indent << "bottom: ";
    Printer<float>::stream(s, indent + "  ", v.bottom);
    s << indent << "left: ";
    Printer<float>::stream(s, indent + "  ", v.left);
    s << indent << "right: ";
    Printer<float>::stream(s, indent + "  ", v.right);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LINE_LBD_MESSAGE_ANCHOR_POSE_H
