// Generated by gencpp from file line_lbd/my_pose.msg
// DO NOT EDIT!


#ifndef LINE_LBD_MESSAGE_MY_POSE_H
#define LINE_LBD_MESSAGE_MY_POSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace line_lbd
{
template <class ContainerAllocator>
struct my_pose_
{
  typedef my_pose_<ContainerAllocator> Type;

  my_pose_()
    : id()
    , Rotation()
    , Trans()
    , rot_tcw()
    , trans_tcw()  {
    }
  my_pose_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , Rotation(_alloc)
    , Trans(_alloc)
    , rot_tcw(_alloc)
    , trans_tcw(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _Rotation_type;
  _Rotation_type Rotation;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _Trans_type;
  _Trans_type Trans;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _rot_tcw_type;
  _rot_tcw_type rot_tcw;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _trans_tcw_type;
  _trans_tcw_type trans_tcw;





  typedef boost::shared_ptr< ::line_lbd::my_pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::line_lbd::my_pose_<ContainerAllocator> const> ConstPtr;

}; // struct my_pose_

typedef ::line_lbd::my_pose_<std::allocator<void> > my_pose;

typedef boost::shared_ptr< ::line_lbd::my_pose > my_posePtr;
typedef boost::shared_ptr< ::line_lbd::my_pose const> my_poseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::line_lbd::my_pose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::line_lbd::my_pose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::line_lbd::my_pose_<ContainerAllocator1> & lhs, const ::line_lbd::my_pose_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.Rotation == rhs.Rotation &&
    lhs.Trans == rhs.Trans &&
    lhs.rot_tcw == rhs.rot_tcw &&
    lhs.trans_tcw == rhs.trans_tcw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::line_lbd::my_pose_<ContainerAllocator1> & lhs, const ::line_lbd::my_pose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace line_lbd

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::line_lbd::my_pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::line_lbd::my_pose_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::line_lbd::my_pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::line_lbd::my_pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::line_lbd::my_pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::line_lbd::my_pose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::line_lbd::my_pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d0887023c1ef3c2d1d16e636bd70b512";
  }

  static const char* value(const ::line_lbd::my_pose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd0887023c1ef3c2dULL;
  static const uint64_t static_value2 = 0x1d16e636bd70b512ULL;
};

template<class ContainerAllocator>
struct DataType< ::line_lbd::my_pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "line_lbd/my_pose";
  }

  static const char* value(const ::line_lbd::my_pose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::line_lbd::my_pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id\n"
"float64[] Rotation\n"
"float64[] Trans\n"
"float64[] rot_tcw\n"
"float64[] trans_tcw\n"
;
  }

  static const char* value(const ::line_lbd::my_pose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::line_lbd::my_pose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.Rotation);
      stream.next(m.Trans);
      stream.next(m.rot_tcw);
      stream.next(m.trans_tcw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct my_pose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::line_lbd::my_pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::line_lbd::my_pose_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "Rotation[]" << std::endl;
    for (size_t i = 0; i < v.Rotation.size(); ++i)
    {
      s << indent << "  Rotation[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Rotation[i]);
    }
    s << indent << "Trans[]" << std::endl;
    for (size_t i = 0; i < v.Trans.size(); ++i)
    {
      s << indent << "  Trans[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Trans[i]);
    }
    s << indent << "rot_tcw[]" << std::endl;
    for (size_t i = 0; i < v.rot_tcw.size(); ++i)
    {
      s << indent << "  rot_tcw[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.rot_tcw[i]);
    }
    s << indent << "trans_tcw[]" << std::endl;
    for (size_t i = 0; i < v.trans_tcw.size(); ++i)
    {
      s << indent << "  trans_tcw[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.trans_tcw[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LINE_LBD_MESSAGE_MY_POSE_H
