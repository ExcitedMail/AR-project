// Generated by gencpp from file line_lbd/updateServer.msg
// DO NOT EDIT!


#ifndef LINE_LBD_MESSAGE_UPDATESERVER_H
#define LINE_LBD_MESSAGE_UPDATESERVER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace line_lbd
{
template <class ContainerAllocator>
struct updateServer_
{
  typedef updateServer_<ContainerAllocator> Type;

  updateServer_()
    : id()
    , rot()
    , trans()  {
    }
  updateServer_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , rot(_alloc)
    , trans(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _rot_type;
  _rot_type rot;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _trans_type;
  _trans_type trans;





  typedef boost::shared_ptr< ::line_lbd::updateServer_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::line_lbd::updateServer_<ContainerAllocator> const> ConstPtr;

}; // struct updateServer_

typedef ::line_lbd::updateServer_<std::allocator<void> > updateServer;

typedef boost::shared_ptr< ::line_lbd::updateServer > updateServerPtr;
typedef boost::shared_ptr< ::line_lbd::updateServer const> updateServerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::line_lbd::updateServer_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::line_lbd::updateServer_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::line_lbd::updateServer_<ContainerAllocator1> & lhs, const ::line_lbd::updateServer_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.rot == rhs.rot &&
    lhs.trans == rhs.trans;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::line_lbd::updateServer_<ContainerAllocator1> & lhs, const ::line_lbd::updateServer_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace line_lbd

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::line_lbd::updateServer_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::line_lbd::updateServer_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::line_lbd::updateServer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::line_lbd::updateServer_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::line_lbd::updateServer_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::line_lbd::updateServer_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::line_lbd::updateServer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "80a7463232d5994edae93915b0f1efbb";
  }

  static const char* value(const ::line_lbd::updateServer_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x80a7463232d5994eULL;
  static const uint64_t static_value2 = 0xdae93915b0f1efbbULL;
};

template<class ContainerAllocator>
struct DataType< ::line_lbd::updateServer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "line_lbd/updateServer";
  }

  static const char* value(const ::line_lbd::updateServer_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::line_lbd::updateServer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id\n"
"float64[] rot\n"
"float64[] trans\n"
;
  }

  static const char* value(const ::line_lbd::updateServer_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::line_lbd::updateServer_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.rot);
      stream.next(m.trans);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct updateServer_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::line_lbd::updateServer_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::line_lbd::updateServer_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "rot[]" << std::endl;
    for (size_t i = 0; i < v.rot.size(); ++i)
    {
      s << indent << "  rot[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.rot[i]);
    }
    s << indent << "trans[]" << std::endl;
    for (size_t i = 0; i < v.trans.size(); ++i)
    {
      s << indent << "  trans[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.trans[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LINE_LBD_MESSAGE_UPDATESERVER_H
