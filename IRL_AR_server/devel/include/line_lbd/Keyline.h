// Generated by gencpp from file line_lbd/Keyline.msg
// DO NOT EDIT!


#ifndef LINE_LBD_MESSAGE_KEYLINE_H
#define LINE_LBD_MESSAGE_KEYLINE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace line_lbd
{
template <class ContainerAllocator>
struct Keyline_
{
  typedef Keyline_<ContainerAllocator> Type;

  Keyline_()
    : startPointX(0.0)
    , startPointY(0.0)
    , endPointX(0.0)
    , endPointY(0.0)  {
    }
  Keyline_(const ContainerAllocator& _alloc)
    : startPointX(0.0)
    , startPointY(0.0)
    , endPointX(0.0)
    , endPointY(0.0)  {
  (void)_alloc;
    }



   typedef float _startPointX_type;
  _startPointX_type startPointX;

   typedef float _startPointY_type;
  _startPointY_type startPointY;

   typedef float _endPointX_type;
  _endPointX_type endPointX;

   typedef float _endPointY_type;
  _endPointY_type endPointY;





  typedef boost::shared_ptr< ::line_lbd::Keyline_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::line_lbd::Keyline_<ContainerAllocator> const> ConstPtr;

}; // struct Keyline_

typedef ::line_lbd::Keyline_<std::allocator<void> > Keyline;

typedef boost::shared_ptr< ::line_lbd::Keyline > KeylinePtr;
typedef boost::shared_ptr< ::line_lbd::Keyline const> KeylineConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::line_lbd::Keyline_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::line_lbd::Keyline_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::line_lbd::Keyline_<ContainerAllocator1> & lhs, const ::line_lbd::Keyline_<ContainerAllocator2> & rhs)
{
  return lhs.startPointX == rhs.startPointX &&
    lhs.startPointY == rhs.startPointY &&
    lhs.endPointX == rhs.endPointX &&
    lhs.endPointY == rhs.endPointY;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::line_lbd::Keyline_<ContainerAllocator1> & lhs, const ::line_lbd::Keyline_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace line_lbd

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::line_lbd::Keyline_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::line_lbd::Keyline_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::line_lbd::Keyline_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::line_lbd::Keyline_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::line_lbd::Keyline_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::line_lbd::Keyline_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::line_lbd::Keyline_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4531a34c2acfb515e3db3e6def66c299";
  }

  static const char* value(const ::line_lbd::Keyline_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4531a34c2acfb515ULL;
  static const uint64_t static_value2 = 0xe3db3e6def66c299ULL;
};

template<class ContainerAllocator>
struct DataType< ::line_lbd::Keyline_<ContainerAllocator> >
{
  static const char* value()
  {
    return "line_lbd/Keyline";
  }

  static const char* value(const ::line_lbd::Keyline_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::line_lbd::Keyline_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 startPointX\n"
"float32 startPointY\n"
"float32 endPointX\n"
"float32 endPointY\n"
;
  }

  static const char* value(const ::line_lbd::Keyline_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::line_lbd::Keyline_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.startPointX);
      stream.next(m.startPointY);
      stream.next(m.endPointX);
      stream.next(m.endPointY);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Keyline_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::line_lbd::Keyline_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::line_lbd::Keyline_<ContainerAllocator>& v)
  {
    s << indent << "startPointX: ";
    Printer<float>::stream(s, indent + "  ", v.startPointX);
    s << indent << "startPointY: ";
    Printer<float>::stream(s, indent + "  ", v.startPointY);
    s << indent << "endPointX: ";
    Printer<float>::stream(s, indent + "  ", v.endPointX);
    s << indent << "endPointY: ";
    Printer<float>::stream(s, indent + "  ", v.endPointY);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LINE_LBD_MESSAGE_KEYLINE_H
