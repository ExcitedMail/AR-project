// Generated by gencpp from file line_lbd/anchor_objects.msg
// DO NOT EDIT!


#ifndef LINE_LBD_MESSAGE_ANCHOR_OBJECTS_H
#define LINE_LBD_MESSAGE_ANCHOR_OBJECTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <line_lbd/anchor_pose.h>

namespace line_lbd
{
template <class ContainerAllocator>
struct anchor_objects_
{
  typedef anchor_objects_<ContainerAllocator> Type;

  anchor_objects_()
    : id()
    , size(0)
    , AnchorPoses()  {
    }
  anchor_objects_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , size(0)
    , AnchorPoses(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef int8_t _size_type;
  _size_type size;

   typedef std::vector< ::line_lbd::anchor_pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::line_lbd::anchor_pose_<ContainerAllocator> >::other >  _AnchorPoses_type;
  _AnchorPoses_type AnchorPoses;





  typedef boost::shared_ptr< ::line_lbd::anchor_objects_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::line_lbd::anchor_objects_<ContainerAllocator> const> ConstPtr;

}; // struct anchor_objects_

typedef ::line_lbd::anchor_objects_<std::allocator<void> > anchor_objects;

typedef boost::shared_ptr< ::line_lbd::anchor_objects > anchor_objectsPtr;
typedef boost::shared_ptr< ::line_lbd::anchor_objects const> anchor_objectsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::line_lbd::anchor_objects_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::line_lbd::anchor_objects_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::line_lbd::anchor_objects_<ContainerAllocator1> & lhs, const ::line_lbd::anchor_objects_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.size == rhs.size &&
    lhs.AnchorPoses == rhs.AnchorPoses;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::line_lbd::anchor_objects_<ContainerAllocator1> & lhs, const ::line_lbd::anchor_objects_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace line_lbd

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::line_lbd::anchor_objects_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::line_lbd::anchor_objects_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::line_lbd::anchor_objects_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::line_lbd::anchor_objects_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::line_lbd::anchor_objects_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::line_lbd::anchor_objects_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::line_lbd::anchor_objects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "22c7b348a4a51cbd4089c0505dd161bb";
  }

  static const char* value(const ::line_lbd::anchor_objects_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x22c7b348a4a51cbdULL;
  static const uint64_t static_value2 = 0x4089c0505dd161bbULL;
};

template<class ContainerAllocator>
struct DataType< ::line_lbd::anchor_objects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "line_lbd/anchor_objects";
  }

  static const char* value(const ::line_lbd::anchor_objects_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::line_lbd::anchor_objects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id\n"
"int8 size\n"
"anchor_pose[] AnchorPoses\n"
"================================================================================\n"
"MSG: line_lbd/anchor_pose\n"
"float32 top\n"
"float32 bottom\n"
"float32 left\n"
"float32 right\n"
;
  }

  static const char* value(const ::line_lbd::anchor_objects_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::line_lbd::anchor_objects_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.size);
      stream.next(m.AnchorPoses);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct anchor_objects_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::line_lbd::anchor_objects_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::line_lbd::anchor_objects_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "size: ";
    Printer<int8_t>::stream(s, indent + "  ", v.size);
    s << indent << "AnchorPoses[]" << std::endl;
    for (size_t i = 0; i < v.AnchorPoses.size(); ++i)
    {
      s << indent << "  AnchorPoses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::line_lbd::anchor_pose_<ContainerAllocator> >::stream(s, indent + "    ", v.AnchorPoses[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LINE_LBD_MESSAGE_ANCHOR_OBJECTS_H
